/* eslint-disable max-classes-per-file */
import React from 'react';
import RedirectException from './RedirectException';
class Redirect {
  constructor({
    from,
    to,
    status
  }) {
    this.path = from;
    this.to = to;
    this.status = status;
  }
  render({
    match
  }) {
    const {
      to,
      status
    } = this;
    let toLocation;
    if (typeof to === 'function') {
      toLocation = to(match);
    } else {
      const {
        router,
        params
      } = match;
      toLocation = router.matcher.format(to, params);
    }
    throw new RedirectException(toLocation, status);
  }
}
if (process.env.NODE_ENV !== "production") {
  // Workaround to make React Proxy give me the original class, to allow
  // makeRouteConfig to get the actual class, when using JSX for routes.
  Redirect.prototype.isReactComponent = {};
}

// This actually doesn't extend a React.Component, but we need consumer to think that it does

export default Redirect;