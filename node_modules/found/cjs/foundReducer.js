"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
exports.__esModule = true;
exports.default = void 0;
var _ActionTypes = _interopRequireDefault(require("./ActionTypes"));
// TODO: Re-check types here.
const foundReducer = (state = null, action) => {
  const {
    type,
    payload
  } = action;
  switch (type) {
    case _ActionTypes.default.UPDATE_MATCH:
      // For the initial match, set resolvedMatch too. There's no previous
      // result to keep rendered, plus this simplifies server rendering.
      return {
        match: payload,
        resolvedMatch: state ? state.resolvedMatch : payload
      };
    case _ActionTypes.default.RESOLVE_MATCH:
      // It doesn't make sense to resolve a match if there wasn't already an
      // unresolved match.
      return state && {
        match: state.match,
        resolvedMatch: payload
      };
    default:
      return state;
  }
};
var _default = foundReducer;
exports.default = _default;
module.exports = exports.default;