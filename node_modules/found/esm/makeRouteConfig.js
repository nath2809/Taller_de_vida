import _objectWithoutPropertiesLoose from "@babel/runtime/helpers/esm/objectWithoutPropertiesLoose";
const _excluded = ["children"];
import React from 'react';
// TODO: what is even happening in this file? Try to fix as any's(+ maybe simplify)
function buildRouteConfig(node, routeConfig) {
  React.Children.forEach(node, child => {
    // Falsy children get coerced to null. We check for this instead of
    // implicit falsiness because we don't want to allow empty strings or 0.
    if (child === null) {
      return;
    }
    if (! /*#__PURE__*/React.isValidElement(child)) {
      throw new TypeError(`\`${child}\` is not a valid React element`);
    }
    let Type = child.type;
    const _child$props = child.props,
      {
        children
      } = _child$props,
      props = _objectWithoutPropertiesLoose(_child$props, _excluded);
    if (Type === React.Fragment) {
      buildRouteConfig(children, routeConfig);
      return;
    }
    if (process.env.NODE_ENV !== "production") {
      if (Type.prototype.constructor !== Type) {
        // Unwrap proxies from react-proxy. This isn't strictly necessary.
        // eslint-disable-next-line no-param-reassign
        Type = Type.prototype.constructor;
      } else if (
      // eslint-disable-next-line no-underscore-dangle
      Type.__reactstandin__getCurrent) {
        // Unwrap proxies from react-stand-in.
        // eslint-disable-next-line no-param-reassign
        Type = Object.getPrototypeOf(Type);
      }
    }
    const route = new Type(props);
    if (children) {
      if ( /*#__PURE__*/React.isValidElement(children) || Array.isArray(children)) {
        // eslint-disable-next-line no-use-before-define
        route.children = buildRouteConfig(children, []);
      } else {
        const routeGroups = {};
        Object.entries(children).forEach(([groupName, groupRoutes]) => {
          // eslint-disable-next-line no-use-before-define
          routeGroups[groupName] = buildRouteConfig(groupRoutes, []);
        });
        route.children = routeGroups;
      }
    }
    routeConfig.push(route);
  });
  return routeConfig;
}

/**
 * Create a route configuration from JSX configuration elements.
 */
export default function makeRouteConfig(node) {
  return buildRouteConfig(node, []);
}