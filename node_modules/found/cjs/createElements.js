"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
exports.__esModule = true;
exports.default = createElements;
var _react = _interopRequireDefault(require("react"));
var _tinyWarning = _interopRequireDefault(require("tiny-warning"));
var _ResolverUtils = require("./ResolverUtils");
var _jsxRuntime = require("react/jsx-runtime");
/**
 * maps an array of `Route`s to React elements. The returned array
 * may contain elements, `null`, or `undefined`. The nullish values produce different results!
 * `undefined` means "still resolving", whereas `null` means "nothing to render". This
 * is important because the resolver calling this, will not update the existing UI
 * if there is an `undefined` value, whereas it will update `null`s rendering nothing.
 *
 * @param {*} routeMatches An array of matched routes
 * @param {*} Components An array of possibly resolved route Components
 * @param {*} matchData An array of possibly resolved route data
 * @returns [null | ReactElement | undefined]
 */
function createElements(routeMatches, Components, matchData) {
  return routeMatches.map((match, i) => {
    const {
      router,
      route
    } = match;
    const Component = Components[i];
    const data = matchData[i];
    const isComponentResolved = (0, _ResolverUtils.isResolved)(Component);
    const areDataResolved = (0, _ResolverUtils.isResolved)(data);

    // TODO: seems like `route` can either be RouteObject or an array of RouteObjects. Were previous types wrong?
    if (!Array.isArray(route) && route.render) {
      // Perhaps undefined here would be more correct for "not ready", but
      // Relay uses null in RelayReadyStateRenderer, so let's follow that
      // convention.
      return route.render({
        match: match,
        Component: isComponentResolved ? Component : null,
        // TODO: Can `match` be removed?
        props: areDataResolved ? {
          match,
          router,
          data
        } : null,
        data: areDataResolved ? data : null
      });
    }
    if (!isComponentResolved || !areDataResolved) {
      // Can't render.
      return undefined;
    }
    if (!Component) {
      // Note this check would be wrong on potentially unresolved data.
      process.env.NODE_ENV !== "production" ? (0, _tinyWarning.default)(data === undefined, `Route ${i} with data has no render method or component.`) : void 0;

      // Nothing to render.
      return null;
    }
    return /*#__PURE__*/(0, _jsxRuntime.jsx)(Component, {
      match: match,
      router: router,
      data: data
    });
  });
}
module.exports = exports.default;