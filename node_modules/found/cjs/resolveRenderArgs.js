"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
exports.__esModule = true;
exports.default = resolveRenderArgs;
var _awaitAsyncGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/awaitAsyncGenerator"));
var _wrapAsyncGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/wrapAsyncGenerator"));
var _HttpError = _interopRequireDefault(require("./HttpError"));
function _asyncIterator(iterable) { var method, async, sync, retry = 2; for ("undefined" != typeof Symbol && (async = Symbol.asyncIterator, sync = Symbol.iterator); retry--;) { if (async && null != (method = iterable[async])) return method.call(iterable); if (sync && null != (method = iterable[sync])) return new AsyncFromSyncIterator(method.call(iterable)); async = "@@asyncIterator", sync = "@@iterator"; } throw new TypeError("Object is not async iterable"); }
function AsyncFromSyncIterator(s) { function AsyncFromSyncIteratorContinuation(r) { if (Object(r) !== r) return Promise.reject(new TypeError(r + " is not an object.")); var done = r.done; return Promise.resolve(r.value).then(function (value) { return { value: value, done: done }; }); } return AsyncFromSyncIterator = function (s) { this.s = s, this.n = s.next; }, AsyncFromSyncIterator.prototype = { s: null, n: null, next: function () { return AsyncFromSyncIteratorContinuation(this.n.apply(this.s, arguments)); }, return: function (value) { var ret = this.s.return; return void 0 === ret ? Promise.resolve({ value: value, done: !0 }) : AsyncFromSyncIteratorContinuation(ret.apply(this.s, arguments)); }, throw: function (value) { var thr = this.s.return; return void 0 === thr ? Promise.reject(value) : AsyncFromSyncIteratorContinuation(thr.apply(this.s, arguments)); } }, new AsyncFromSyncIterator(s); }
function foldElements(elementsRaw, routeIndices) {
  const elements = [];
  for (const routeIndex of routeIndices) {
    if (typeof routeIndex === 'object') {
      // Reshape the next elements in the elements array to match the nested
      // tree structure corresponding to the route groups.
      const groupElements = {};
      Object.entries(routeIndex).forEach(([groupName, groupRouteIndices]) => {
        const folded = foldElements(elementsRaw, groupRouteIndices);
        groupElements[groupName] = folded;
      });
      elements.push(groupElements);
    } else {
      // We intentionally modify elementsRaw, to make it easier to recursively
      // handle groups.
      elements.push(elementsRaw.shift());
    }
  }
  return elements;
}
function resolveRenderArgs(_x, _x2) {
  return _resolveRenderArgs.apply(this, arguments);
}
function _resolveRenderArgs() {
  _resolveRenderArgs = (0, _wrapAsyncGenerator2.default)(function* (router, {
    match,
    matchContext,
    resolver
  }) {
    const routes = router.matcher.getRoutes(match);
    const augmentedMatch = Object.assign({}, match, {
      routes,
      router,
      // Convenience access for route components.
      context: matchContext
    });
    if (!routes) {
      // Immediately render a "not found" error if no routes matched.
      yield Object.assign({}, augmentedMatch, {
        error: new _HttpError.default(404)
      });
      return;
    }
    try {
      var _iteratorAbruptCompletion = false;
      var _didIteratorError = false;
      var _iteratorError;
      try {
        for (var _iterator = _asyncIterator(resolver.resolveElements(augmentedMatch)), _step; _iteratorAbruptCompletion = !(_step = yield (0, _awaitAsyncGenerator2.default)(_iterator.next())).done; _iteratorAbruptCompletion = false) {
          const elements = _step.value;
          yield Object.assign({}, augmentedMatch, {
            elements: elements && foldElements([...elements], match.routeIndices)
          });
        }
      } catch (err) {
        _didIteratorError = true;
        _iteratorError = err;
      } finally {
        try {
          if (_iteratorAbruptCompletion && _iterator.return != null) {
            yield (0, _awaitAsyncGenerator2.default)(_iterator.return());
          }
        } finally {
          if (_didIteratorError) {
            throw _iteratorError;
          }
        }
      }
    } catch (e) {
      if (e.isFoundHttpError) {
        yield Object.assign({}, augmentedMatch, {
          error: e
        });
        return;
      }
      throw e;
    }
  });
  return _resolveRenderArgs.apply(this, arguments);
}
module.exports = exports.default;