import _objectWithoutPropertiesLoose from "@babel/runtime/helpers/esm/objectWithoutPropertiesLoose";
const _excluded = ["store", "historyProtocol", "historyMiddlewares", "historyOptions", "routeConfig", "matcherOptions", "getFound"];
import useIsomorphicEffect from '@restart/hooks/useIsomorphicEffect';
import React, { forwardRef, useImperativeHandle, useState } from 'react';
import createBaseRouter from './createBaseRouter';
import createFarceStore from './createFarceStore';
import { jsx as _jsx } from "react/jsx-runtime";
export default function createFarceRouter(_ref) {
  let {
      store: userStore,
      historyProtocol,
      historyMiddlewares,
      historyOptions,
      routeConfig,
      // @ts-ignore TODO: matcher options should not accessible to end user
      matcherOptions,
      getFound = ({
        found
      }) => found
    } = _ref,
    options = _objectWithoutPropertiesLoose(_ref, _excluded);
  const Router = createBaseRouter(options);
  const store = userStore || createFarceStore({
    historyProtocol,
    historyMiddlewares,
    historyOptions,
    routeConfig,
    matcherOptions
  });
  const FarceRouterInstance = /*#__PURE__*/forwardRef((props, ref) => {
    const [state, setState] = useState(() => {
      const {
        match,
        resolvedMatch
      } = getFound(store.getState());
      return {
        match,
        resolvedMatch
      };
    });
    useIsomorphicEffect(() => {
      return store.subscribe(() => {
        setState(prev => {
          const {
            match,
            resolvedMatch
          } = getFound(store.getState());
          if ((prev == null ? void 0 : prev.match) === match && prev.resolvedMatch === resolvedMatch) {
            return prev;
          }
          return {
            match,
            resolvedMatch
          };
        });
      });
    }, []);
    useImperativeHandle(ref, () => store, []);
    return /*#__PURE__*/_jsx(Router, Object.assign({}, props, state, {
      store: store
    }));
  });
  FarceRouterInstance.displayName = 'FarceRouter';
  return FarceRouterInstance;
}