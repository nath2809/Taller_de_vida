import _objectWithoutPropertiesLoose from "@babel/runtime/helpers/esm/objectWithoutPropertiesLoose";
const _excluded = ["historyProtocol", "historyMiddlewares", "historyOptions", "routeConfig", "matchContext", "resolver"];
import createFarceRouter from './createFarceRouter';
import createFarceStore from './createFarceStore';
import getStoreRenderArgs from './getStoreRenderArgs';
export default async function createInitialFarceRouter(_ref) {
  let {
      historyProtocol,
      historyMiddlewares,
      historyOptions,
      routeConfig,
      matchContext,
      resolver
    } = _ref,
    options = _objectWithoutPropertiesLoose(_ref, _excluded);
  const store = createFarceStore({
    historyProtocol,
    historyMiddlewares,
    historyOptions,
    routeConfig
  });
  const FarceRouterInstance = createFarceRouter(Object.assign({}, options, {
    store
  }));

  // This intentionally doesn't handle RedirectExceptions, because those
  // shouldn't happen here anyway.
  const initialRenderArgs = await getStoreRenderArgs({
    store,
    matchContext,
    resolver
  });

  // We own this FarceRouter, so it's safe to replace its default props.
  FarceRouterInstance.defaultProps = Object.assign({}, FarceRouterInstance.defaultProps, {
    matchContext,
    resolver,
    initialRenderArgs
  });
  return FarceRouterInstance;
}