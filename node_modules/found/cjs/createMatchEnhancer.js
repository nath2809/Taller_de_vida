"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
exports.__esModule = true;
exports.default = createMatchEnhancer;
var _ActionTypes = _interopRequireDefault(require("farce/ActionTypes"));
var _redux = require("redux");
var _ActionTypes2 = _interopRequireDefault(require("./ActionTypes"));
function createMatchMiddleware(matcher, getFound) {
  return function matchMiddleware(store) {
    return next => action => {
      const {
        type,
        payload
      } = action;
      if (type !== _ActionTypes.default.UPDATE_LOCATION) {
        return next(action);
      }
      let matchPayload;
      if (!payload.doNotRerunMatch) {
        matchPayload = Object.assign({
          location: payload
        }, matcher.match(payload));
      } else {
        // HAX: this is terrible, but sometimes you need to update the location without updating the routing world
        // so we mutate the current match which will keep it referencially the same and pass checks but update the location
        // on it
        const {
          match
        } = getFound(store.getState());
        match.location = payload;
        matchPayload = match;
      }
      return next({
        type: _ActionTypes2.default.UPDATE_MATCH,
        payload: matchPayload
      });
    };
  };
}
function createMatchEnhancer(matcher, getFound = ({
  found
}) => found) {
  return function matchEnhancer(createStore) {
    return (...args) => {
      const middlewareEnhancer = (0, _redux.applyMiddleware)(createMatchMiddleware(matcher, getFound));
      const store = middlewareEnhancer(createStore)(...args);
      function replaceRouteConfig(routeConfig) {
        matcher.replaceRouteConfig(routeConfig);
        store.dispatch({
          type: _ActionTypes.default.UPDATE_LOCATION,
          payload: getFound(store.getState()).match.location
        });
      }
      return Object.assign({}, store, {
        found: {
          matcher,
          replaceRouteConfig
        }
      });
    };
  };
}
module.exports = exports.default;