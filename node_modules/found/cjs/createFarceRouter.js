"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
exports.__esModule = true;
exports.default = createFarceRouter;
var _objectWithoutPropertiesLoose2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutPropertiesLoose"));
var _useIsomorphicEffect = _interopRequireDefault(require("@restart/hooks/useIsomorphicEffect"));
var _react = _interopRequireWildcard(require("react"));
var _createBaseRouter = _interopRequireDefault(require("./createBaseRouter"));
var _createFarceStore = _interopRequireDefault(require("./createFarceStore"));
var _jsxRuntime = require("react/jsx-runtime");
const _excluded = ["store", "historyProtocol", "historyMiddlewares", "historyOptions", "routeConfig", "matcherOptions", "getFound"];
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
function createFarceRouter(_ref) {
  let {
      store: userStore,
      historyProtocol,
      historyMiddlewares,
      historyOptions,
      routeConfig,
      // @ts-ignore TODO: matcher options should not accessible to end user
      matcherOptions,
      getFound = ({
        found
      }) => found
    } = _ref,
    options = (0, _objectWithoutPropertiesLoose2.default)(_ref, _excluded);
  const Router = (0, _createBaseRouter.default)(options);
  const store = userStore || (0, _createFarceStore.default)({
    historyProtocol,
    historyMiddlewares,
    historyOptions,
    routeConfig,
    matcherOptions
  });
  const FarceRouterInstance = /*#__PURE__*/(0, _react.forwardRef)((props, ref) => {
    const [state, setState] = (0, _react.useState)(() => {
      const {
        match,
        resolvedMatch
      } = getFound(store.getState());
      return {
        match,
        resolvedMatch
      };
    });
    (0, _useIsomorphicEffect.default)(() => {
      return store.subscribe(() => {
        setState(prev => {
          const {
            match,
            resolvedMatch
          } = getFound(store.getState());
          if ((prev == null ? void 0 : prev.match) === match && prev.resolvedMatch === resolvedMatch) {
            return prev;
          }
          return {
            match,
            resolvedMatch
          };
        });
      });
    }, []);
    (0, _react.useImperativeHandle)(ref, () => store, []);
    return /*#__PURE__*/(0, _jsxRuntime.jsx)(Router, Object.assign({}, props, state, {
      store: store
    }));
  });
  FarceRouterInstance.displayName = 'FarceRouter';
  return FarceRouterInstance;
}
module.exports = exports.default;